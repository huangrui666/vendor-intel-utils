From 24599feaa1ee2950182127146359b1276de5da47 Mon Sep 17 00:00:00 2001
From: Huang Rui <rui1.huang@intel.com>
Date: Tue, 27 Jun 2023 16:29:39 +0800
Subject: [PATCH] Fix coverity issues for minigbm.

Tracked-On: OAM-106693
Change-Id: Id0b7a19ceb0502562c7cb67d279c9530892f1a90
Signed-off-by: Huang Rui <rui1.huang@intel.com>
---
 cros_gralloc/cros_gralloc_driver.cc |  2 +-
 i915.c                              | 22 +++++++++++-----------
 2 files changed, 12 insertions(+), 12 deletions(-)

diff --git a/cros_gralloc/cros_gralloc_driver.cc b/cros_gralloc/cros_gralloc_driver.cc
index 6c9c913..ac18ad2 100644
--- a/cros_gralloc/cros_gralloc_driver.cc
+++ b/cros_gralloc/cros_gralloc_driver.cc
@@ -107,10 +107,10 @@ int32_t cros_gralloc_driver::init()
 			continue;
 
 		fd = open(node, O_RDWR, 0);
+		drv_log("open(%s)", node);
 		free(node);
 		if (fd < 0)
 			continue;
-		drv_log("open(%s)", node);
 
 		version = drmGetVersion(fd);
 		if (!version) {
diff --git a/i915.c b/i915.c
index 287ac01..685db70 100644
--- a/i915.c
+++ b/i915.c
@@ -284,16 +284,11 @@ static int i915_add_combinations(struct driver *drv)
 static int i915_align_dimensions(struct bo *bo, uint32_t tiling, uint32_t *stride,
 				 uint32_t *aligned_height)
 {
-	uint32_t horizontal_alignment;
-	uint32_t vertical_alignment;
+	uint32_t horizontal_alignment = 0;
+	uint32_t vertical_alignment = 0;
 	struct i915_device *i915 = bo->drv->priv;
-	if (i915->genx10 >= 125) {
-		horizontal_alignment = 4;
-		vertical_alignment = 4;
-	}
 
 	switch (tiling) {
-	default:
 	case I915_TILING_NONE:
 		/*
 		 * The Intel GPU doesn't need any alignment in linear mode,
@@ -320,6 +315,12 @@ static int i915_align_dimensions(struct bo *bo, uint32_t tiling, uint32_t *strid
 		horizontal_alignment = 128;
 		vertical_alignment = 32;
 		break;
+	default:
+		if (i915->genx10 >= 125) {
+			horizontal_alignment = 4;
+			vertical_alignment = 4;
+		}
+		break;
 	}
 	if (i915->genx10 >= 125) {
 		/*
@@ -786,8 +787,8 @@ static int i915_bo_create_from_metadata(struct bo *bo)
 			struct drm_gem_close gem_close;
 			memset(&gem_close, 0, sizeof(gem_close));
 			gem_close.handle = bo->handles[0].u32;
-			drmIoctl(bo->drv->fd, DRM_IOCTL_GEM_CLOSE, &gem_close);
-
+			if (drmIoctl(bo->drv->fd, DRM_IOCTL_GEM_CLOSE, &gem_close))
+				return -errno;
 			printf("DRM_IOCTL_I915_GEM_SET_TILING failed with %d\n", errno);
 			return -errno;
 		}
@@ -845,8 +846,7 @@ static void *i915_bo_map(struct bo *bo, struct vma *vma, size_t plane, uint32_t
 		if (i915->has_local_mem) {
 			mmap_arg.flags = I915_MMAP_OFFSET_FIXED;
 		} else {
-			bool wc = true;
-			mmap_arg.flags = wc ? I915_MMAP_OFFSET_WC : I915_MMAP_OFFSET_WB;
+			mmap_arg.flags = I915_MMAP_OFFSET_WC;
 		}
 
 		/* Get the fake offset back */
-- 
2.25.1

